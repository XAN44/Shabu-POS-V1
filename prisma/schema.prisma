datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  role          String
  password      String
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  activeSession ActiveSession?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model ActiveSession {
  id           String   @id @default(cuid())
  userId       String   @unique
  sessionToken String   @unique
  deviceInfo   String?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  lastActivity DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("active_sessions")
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Table {
  id            String      @id @default(cuid())
  number        String
  seats         Int
  status        TableStatus
  qrCode        String?
  orders        Order[]
  Bill          Bill[]
  lastClearedAt DateTime    @default(now())

  @@map("tables")
}

model MenuItem {
  id            String          @id @default(cuid())
  name          String
  price         Float
  category      String
  description   String?
  image         String?
  imageKey      String?
  available     Boolean         @default(true)
  orderItems    OrderItem[]
  DraftCartItem DraftCartItem[]
  addons        MenuAddon[] // เพิ่มความสัมพันธ์กับ add-ons

  @@map("menu_items")
}

// เพิ่ม model ใหม่สำหรับ Add-ons
model MenuAddon {
  id          String  @id @default(cuid())
  menuItemId  String
  name        String
  price       Float
  category    String?
  description String?
  available   Boolean @default(true)

  menuItem        MenuItem             @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  orderItemAddons OrderItemAddon[]
  draftCartAddons DraftCartItemAddon[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("menu_addons")
}

// เปลี่ยนแค่ตรงนี้ - ใช้ SetNull แทน Cascade
model Order {
  id           String      @id @default(cuid())
  tableId      String?
  status       OrderStatus @default(new)
  totalAmount  Float
  orderTime    DateTime    @default(now())
  notes        String?
  customerName String?
  createdAt    DateTime    @default(now())

  tableNumber String?

  table Table?      @relation(fields: [tableId], references: [id], onDelete: SetNull)
  items OrderItem[]

  @@map("orders")
}

model UploadedFile {
  id         String   @id @default(cuid())
  key        String   @unique
  url        String
  name       String
  size       Int
  type       String
  uploadedBy String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("uploaded_files")
}

model Bill {
  id            String   @id @default(cuid())
  tableId       String?
  table         Table?   @relation(fields: [tableId], references: [id], onDelete: SetNull)
  totalAmount   Float
  paymentTime   DateTime @default(now())
  paymentMethod String?
  orderIds      String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bills")
}

// เปลี่ยนแค่ตรงนี้ - ใช้ SetNull
model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  menuItemId String? // เปลี่ยนเป็น optional
  quantity   Int
  notes      String?
  price      Float

  // เพิ่มฟิลด์สำรองเก็บข้อมูลเมนู
  menuItemName String? // เก็บชื่อเมนูไว้

  order    Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem MenuItem?        @relation(fields: [menuItemId], references: [id], onDelete: SetNull)
  addons   OrderItemAddon[] // เพิ่มความสัมพันธ์กับ add-ons

  @@map("order_items")
}

// เพิ่ม model ใหม่สำหรับ Add-ons ในออเดอร์
model OrderItemAddon {
  id          String  @id @default(cuid())
  orderItemId String
  addonId     String?
  name        String // เก็บชื่อ addon ไว้
  price       Float // เก็บราคา addon ไว้
  quantity    Int     @default(1)

  orderItem OrderItem  @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  addon     MenuAddon? @relation(fields: [addonId], references: [id], onDelete: SetNull)

  @@map("order_item_addons")
}

enum TableStatus {
  available
  occupied
  reserved
  cleaning
}

enum OrderStatus {
  new
  preparing
  ready
  served
  cancelled
}

model DraftCart {
  id        String          @id @default(cuid())
  tableId   String
  items     DraftCartItem[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([tableId])
}

model DraftCartItem {
  id          String  @id @default(cuid())
  draftCartId String
  menuItemId  String? // เปลี่ยนเป็น optional
  quantity    Int

  // เพิ่มฟิลด์สำรองเก็บข้อมูลเมนู (optional)
  menuItemName  String?
  menuItemPrice Float?

  draftCart DraftCart            @relation(fields: [draftCartId], references: [id], onDelete: Cascade)
  menuItem  MenuItem?            @relation(fields: [menuItemId], references: [id], onDelete: SetNull) // เปลี่ยนเป็ SetNull
  addons    DraftCartItemAddon[] // เพิ่มความสัมพันธ์กับ add-ons

  @@index([draftCartId])
}

// เพิ่ม model ใหม่สำหรับ Add-ons ใน Draft Cart
model DraftCartItemAddon {
  id              String  @id @default(cuid())
  draftCartItemId String
  addonId         String?
  name            String // เก็บชื่อ addon ไว้
  price           Float // เก็บราคา addon ไว้
  quantity        Int     @default(1)

  draftCartItem DraftCartItem @relation(fields: [draftCartItemId], references: [id], onDelete: Cascade)
  addon         MenuAddon?    @relation(fields: [addonId], references: [id], onDelete: SetNull)

  @@map("draft_cart_item_addons")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
}

model QRCodeSetting {
  id        String   @id @default(cuid())
  url       String // URL ของ QR Code image
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("qr_code_settings")
}
