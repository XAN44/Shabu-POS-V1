// components/menu/MenuHeader.tsx

import { Button } from "@/components/ui/button";
import { ShoppingCart, Receipt, CreditCard } from "lucide-react";

interface MenuHeaderProps {
  hasServedOrders: boolean;
  servedOrdersCount: number;
  cartLength: number;
  isConnected: boolean;
  numberTable: string;
  onShowBill: () => void;
  onQuickCheckout: () => void; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
  onPreviewBill: () => void; // ‡πÅ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏π‡∏ö‡∏¥‡∏•
  isCheckingOut?: boolean; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå
}

export const MenuHeader: React.FC<MenuHeaderProps> = ({
  hasServedOrders,
  servedOrdersCount,
  cartLength,
  isConnected,
  onShowBill,
  onQuickCheckout,
  numberTable,
  isCheckingOut = false,
}) => {
  return (
    <div className="bg-white/90 backdrop-blur-sm rounded-2xl shadow-lg p-6 border border-white/20">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-lg font-medium text-gray-700">{numberTable}</p>
          <h1 className="text-3xl font-bold text-gray-800 mb-2">üç≤ ‡πÄ‡∏°‡∏ô‡∏π</h1>
          <div className="text-gray-600 flex items-center gap-2">
            {isConnected ? (
              <span className="text-green-600 text-sm flex items-center gap-1">
                <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß
              </span>
            ) : (
              <span className="text-orange-600 text-sm flex items-center gap-1">
                <div className="w-2 h-2 bg-orange-500 rounded-full animate-pulse"></div>
                ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...
              </span>
            )}
          </div>
        </div>

        <div className="flex items-center gap-3">
          {hasServedOrders && (
            <>
              {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡∏´‡∏•‡∏±‡∏Å */}
              <Button
                onClick={onQuickCheckout}
                disabled={isCheckingOut}
                className="bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white px-6 py-2 rounded-xl shadow-lg flex items-center gap-2 font-medium"
              >
                {isCheckingOut ? (
                  <>
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå...
                  </>
                ) : (
                  <>
                    <CreditCard className="w-5 h-5" />
                    ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå
                    <span className="ml-1 bg-white/20 backdrop-blur-sm px-2 py-1 rounded-full text-xs">
                      {servedOrdersCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                    </span>
                  </>
                )}
              </Button>

              {/* ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏¥‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏° (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£) */}
              <Button
                onClick={onShowBill}
                className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-xl shadow-lg flex items-center gap-2"
              >
                <Receipt className="w-5 h-5" />
                ‡∏ö‡∏¥‡∏•‡πÄ‡∏ï‡πá‡∏°
              </Button>
            </>
          )}

          {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ */}
          {cartLength > 0 && (
            <div className="relative">
              <div className="bg-gradient-to-r from-orange-500 to-orange-600 text-white p-3 rounded-full shadow-lg">
                <ShoppingCart className="w-6 h-6" />
              </div>
              <span className="absolute -top-2 -right-2 bg-yellow-400 text-orange-800 rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold shadow-md">
                {cartLength}
              </span>
            </div>
          )}
        </div>
      </div>

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÅ‡∏•‡πâ‡∏ß */}
      {hasServedOrders && (
        <div className="mt-4 p-3 bg-green-50 rounded-xl border border-green-200">
          <div className="flex items-center justify-between text-sm">
            <span className="text-green-700">
              ‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÅ‡∏•‡πâ‡∏ß {servedOrdersCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            </span>
            <span className="text-green-600 font-medium">‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå</span>
          </div>
        </div>
      )}
    </div>
  );
};
