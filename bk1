"use client";

import { useState, useEffect } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import { io, Socket } from "socket.io-client";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { ShoppingCart, Plus, Minus, X, CheckCircle } from "lucide-react";
import { useSocketContext } from "../providers/SocketProvider";

interface MenuItem {
  id: string;
  name: string;
  description: string;
  price: number;
  category: string;
  available: boolean;
  options?: string[];
}

interface CartItem {
  menuItemId: string;
  menuItem: MenuItem;
  quantity: number;
  option?: string;
  notes?: string;
  subtotal: number;
}

interface SubmittedOrder {
  orderId: string;
  items: CartItem[];
}

interface OrderStatusEvent {
  orderId: string;
  status: string; // new | preparing | ready | served | cancelled
  timestamp: Date;
}

interface OrderItem {
  menuItem: MenuItem;
  quantity: number;
  notes?: string;
  option?: string;
}

interface Order {
  id: string;
  status: string;
  items: OrderItem[];
}

export default function MenuPage() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const tableId = searchParams.get("table");
  const [myOrders, setMyOrders] = useState<Order[]>([]);

  const [menuItems, setMenuItems] = useState<MenuItem[]>([]);
  const [selectedItem, setSelectedItem] = useState<MenuItem | null>(null);
  const [quantity, setQuantity] = useState(1);
  const [option, setOption] = useState<string>("");
  const [notes, setNotes] = useState<string>("");
  const [cart, setCart] = useState<CartItem[]>([]);
  const [submittedOrders, setSubmittedOrders] = useState<SubmittedOrder[]>([]);
  const [loading, setLoading] = useState(false);
  const [tableValid, setTableValid] = useState<boolean | null>(null);
  const [submittedOrder, setSubmittedOrder] = useState(false);
  const [categories, setCategories] = useState<string[]>([]);
  const [selectedCategory, setSelectedCategory] = useState<string>("all");

  const { socket, isConnected } = useSocketContext();
  const [orderStatuses, setOrderStatuses] = useState<Record<string, string>>(
    {}
  ); // orderId -> status

  const [myOrder, setMyOrder] = useState<{
    id: string;
    status: string;
    items: {
      menuItem: MenuItem;
      quantity: number;
      option?: string;
      notes?: string;
    }[];
  } | null>(null);

  // ตรวจสอบ tableId
  useEffect(() => {
    if (!tableId) {
      setTableValid(false);
      return;
    }

    const checkTable = async () => {
      try {
        const res = await fetch(`/api/tables/${tableId}`);
        setTableValid(res.ok);
      } catch (err) {
        console.error("Failed to verify table:", err);
        setTableValid(false);
      }
    };
    checkTable();
  }, [tableId]);

  // โหลดเมนู
  useEffect(() => {
    if (!tableValid) return;
    const fetchMenu = async () => {
      try {
        const res = await fetch("/api/menu");
        if (!res.ok) throw new Error("Failed to fetch menu");

        const data: MenuItem[] = await res.json();
        const availableItems = data.filter((item) => item.available);
        setMenuItems(availableItems);

        const uniqueCategories = [
          ...new Set(availableItems.map((item) => item.category)),
        ];
        setCategories(uniqueCategories);
      } catch (err) {
        console.error("Failed to fetch menu:", err);
      }
    };
    fetchMenu();
  }, [tableValid]);

  // ดึงออเดอร์ล่าสุด
  const fetchStatusOrder = async () => {
    if (!tableId) return;

    try {
      const res = await fetch(`/api/orders/${tableId}`);
      if (!res.ok) throw new Error("Failed to fetch orders");

      const data = await res.json();
      if (Array.isArray(data)) {
        setMyOrders(data);
        // อัปเดต orderStatuses สำหรับทุกออเดอร์ที่ดึงมา
        const newOrderStatuses: Record<string, string> = {};
        data.forEach((order) => {
          newOrderStatuses[order.id] = order.status;
        });
        setOrderStatuses(newOrderStatuses);
      }
    } catch (error) {
      console.error("Error fetching order status:", error);
    }
  };

  useEffect(() => {
    if (tableId) fetchStatusOrder();
  }, [tableId]);

  // Socket.IO สำหรับ realtime order status
  useEffect(() => {
    if (!socket || !isConnected || !tableId) return;

    // เข้าร่วม room ของโต๊ะนี้
    socket.emit("joinTable", tableId);

    // handler แยก
    const handleOrderStatusUpdated = (data: OrderStatusEvent) => {
      // อัปเดต orderStatuses
      setOrderStatuses((prev) => ({
        ...prev,
        [data.orderId]: data.status,
      }));

      // อัปเดต myOrder ถ้าเป็น order ของโต๊ะนี้
      setMyOrder((prev) => {
        if (!prev) return prev;
        if (prev.id === data.orderId) {
          return { ...prev, status: data.status };
        }
        return prev;
      });
    };

    // ฟัง event
    socket.on("orderStatusUpdated", handleOrderStatusUpdated);

    // Cleanup
    return () => {
      socket.emit("leaveTable", tableId);
      socket.off("orderStatusUpdated", handleOrderStatusUpdated);
    };
  }, [socket, isConnected, tableId]);

  // ฟิลเตอร์เมนู
  const filteredMenuItems =
    selectedCategory === "all"
      ? menuItems
      : menuItems.filter((item) => item.category === selectedCategory);

  const openItemModal = (item: MenuItem) => {
    setSelectedItem(item);
    setQuantity(1);
    setOption("");
    setNotes("");
  };

  const addToCart = () => {
    if (!selectedItem) return;

    const subtotal = selectedItem.price * quantity;
    const cartItem: CartItem = {
      menuItemId: selectedItem.id,
      quantity,
      option: option || undefined,
      notes: notes || undefined,
      menuItem: selectedItem,
      subtotal,
    };

    setCart((prev) => [...prev, cartItem]);
    setSelectedItem(null);
  };

  const removeFromCart = (index: number) => {
    setCart((prev) => prev.filter((_, i) => i !== index));
  };

  const updateCartItemQuantity = (index: number, newQuantity: number) => {
    if (newQuantity <= 0) {
      removeFromCart(index);
      return;
    }
    setCart((prev) =>
      prev.map((item, i) =>
        i === index
          ? {
              ...item,
              quantity: newQuantity,
              subtotal: item.menuItem.price * newQuantity,
            }
          : item
      )
    );
  };

  const getTotalAmount = () =>
    cart.reduce((sum, item) => sum + item.subtotal, 0);

  // Submit order
  const submitOrder = async () => {
    if (!tableId) return alert("ไม่พบโต๊ะของคุณ");
    if (cart.length === 0) return alert("กรุณาเลือกอาหารก่อนสั่ง");

    setLoading(true);
    try {
      const orderItems = cart.map((item) => ({
        menuItemId: item.menuItemId,
        quantity: item.quantity,
        option: item.option,
        notes: item.notes,
      }));

      const res = await fetch("/api/orders", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ tableId, items: orderItems }),
      });

      if (!res.ok) throw new Error("Failed to submit order");

      const newOrder = await res.json();

      // เพิ่มออเดอร์ใหม่ลงใน State ของ myOrders
      setMyOrders((prev) => [...prev, newOrder]);

      // อัปเดต orderStatuses ด้วยออเดอร์ใหม่
      setOrderStatuses((prev) => ({
        ...prev,
        [newOrder.id]: newOrder.status,
      }));

      setCart([]);
      setSubmittedOrder(true);
      setTimeout(() => setSubmittedOrder(false), 3000);
    } catch (err) {
      console.error("Error submitting order:", err);
      alert("เกิดข้อผิดพลาดในการสั่งอาหาร กรุณาลองอีกครั้ง");
    } finally {
      setLoading(false);
    }
  };

  // Render
  if (tableValid === false)
    return (
      <div className="p-6 max-w-3xl mx-auto text-center">
        <div className="bg-red-50 border border-red-200 rounded-lg p-6">
          <h1 className="text-2xl font-bold text-red-600 mb-4">
            ไม่พบโต๊ะ กรุณาสแกน QR Code ใหม่
          </h1>
          <Button onClick={() => router.push("/")}>กลับไปหน้าแรก</Button>
        </div>
      </div>
    );

  if (tableValid === null)
    return (
      <div className="p-6 max-w-3xl mx-auto">
        <div className="flex justify-center items-center h-64">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
            <p>กำลังตรวจสอบโต๊ะ...</p>
          </div>
        </div>
      </div>
    );

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="p-6 space-y-6 max-w-4xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-lg shadow-sm p-6">
          <h1 className="text-3xl font-bold text-gray-800">เมนูร้านชาบู</h1>
          <div className="flex items-center justify-between mt-2">
            <p className="text-gray-600">
              โต๊ะ: <span className="font-semibold">{tableId}</span>
            </p>

            {myOrders.length > 0 && (
              <div className="bg-white rounded-lg shadow-lg p-6 mt-6">
                <h2 className="text-lg font-semibold mb-4 flex items-center">
                  <ShoppingCart className="w-5 h-5 mr-2" />
                  สถานะออเดอร์ของคุณ
                </h2>
                <div className="space-y-4">
                  {myOrders.map((order, orderIndex) => (
                    <Card key={order.id} className="p-4 bg-gray-50 border">
                      <div className="flex justify-between items-center mb-2">
                        <h3 className="font-semibold text-gray-800">
                          คำสั่งซื้อที่ #{orderIndex + 1}
                        </h3>
                        <Badge className="text-sm">
                          สถานะ:{" "}
                          {orderStatuses[order.id] === "new"
                            ? "กำลังเตรียม"
                            : orderStatuses[order.id] === "ready"
                            ? "พร้อมเสิร์ฟ"
                            : "เสิร์ฟแล้ว"}
                        </Badge>
                      </div>
                      <div className="space-y-2 text-sm">
                        {order.items.map((item, itemIndex: number) => (
                          <div
                            key={itemIndex}
                            className="flex justify-between items-center text-gray-600"
                          >
                            <p className="flex-1 truncate">
                              {item.menuItem.name}{" "}
                              {item.option && `(${item.option})`}
                            </p>
                            <p>x{item.quantity}</p>
                            <p className="ml-4 font-medium text-right min-w-[50px]">
                              ฿
                              {(
                                item.menuItem.price * item.quantity
                              ).toLocaleString()}
                            </p>
                          </div>
                        ))}
                      </div>
                    </Card>
                  ))}
                </div>
              </div>
            )}
            {cart.length > 0 && (
              <Badge
                variant="secondary"
                className="bg-orange-100 text-orange-800"
              >
                <ShoppingCart className="w-4 h-4 mr-1" />
                {cart.length} รายการ
              </Badge>
            )}
          </div>
        </div>

        {/* Success Message */}
        {submittedOrder && (
          <div className="bg-green-50 border border-green-200 rounded-lg p-4 flex items-center">
            <CheckCircle className="w-6 h-6 text-green-600 mr-3" />
            <div>
              <h3 className="font-semibold text-green-800">
                สั่งอาหารเรียบร้อยแล้ว!
              </h3>
              <p className="text-green-600">ออเดอร์ของคุณถูกส่งไปยังครัวแล้ว</p>
            </div>
          </div>
        )}

        {/* Category Filter */}
        {categories.length > 1 && (
          <div className="bg-white rounded-lg shadow-sm p-4">
            <h3 className="font-semibold mb-3">หมวดหมู่</h3>
            <div className="flex flex-wrap gap-2">
              <button
                onClick={() => setSelectedCategory("all")}
                className={`px-4 py-2 rounded-full text-sm transition-colors ${
                  selectedCategory === "all"
                    ? "bg-blue-500 text-white"
                    : "bg-gray-100 text-gray-700 hover:bg-gray-200"
                }`}
              >
                ทั้งหมด
              </button>
              {categories.map((category) => (
                <button
                  key={category}
                  onClick={() => setSelectedCategory(category)}
                  className={`px-4 py-2 rounded-full text-sm transition-colors ${
                    selectedCategory === category
                      ? "bg-blue-500 text-white"
                      : "bg-gray-100 text-gray-700 hover:bg-gray-200"
                  }`}
                >
                  {category}
                </button>
              ))}
            </div>
          </div>
        )}

        {/* Menu Items */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredMenuItems.map((item) => (
            <Card
              key={item.id}
              className="cursor-pointer hover:shadow-lg transition-shadow bg-white"
              onClick={() => openItemModal(item)}
            >
              <CardHeader>
                <div className="flex justify-between items-start">
                  <CardTitle className="text-lg">{item.name}</CardTitle>
                  <Badge variant="outline" className="text-xs">
                    {item.category}
                  </Badge>
                </div>
              </CardHeader>
              <CardContent>
                <p className="text-gray-600 text-sm mb-3">{item.description}</p>
                <div className="flex justify-between items-center">
                  <span className="text-xl font-bold text-blue-600">
                    ฿{item.price.toLocaleString()}
                  </span>
                  {item.options && item.options.length > 0 && (
                    <Badge variant="secondary" className="text-xs">
                      มีตัวเลือก
                    </Badge>
                  )}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Item Modal */}
        {selectedItem && (
          <div className="fixed inset-0 bg-black/50 flex justify-center items-center z-50 p-4">
            <div className="bg-white p-6 rounded-lg w-full max-w-md space-y-4">
              <div className="flex justify-between items-start">
                <h2 className="text-xl font-semibold">{selectedItem.name}</h2>
                <button
                  onClick={() => setSelectedItem(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>

              <p className="text-sm text-gray-600">
                {selectedItem.description}
              </p>
              <p className="text-lg font-semibold text-blue-600">
                ฿{selectedItem.price.toLocaleString()}
              </p>

              {/* Quantity */}
              <div className="space-y-2">
                <Label>จำนวน</Label>
                <div className="flex items-center gap-3">
                  <button
                    onClick={() => setQuantity(Math.max(1, quantity - 1))}
                    className="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-100"
                  >
                    <Minus className="w-4 h-4" />
                  </button>
                  <span className="w-8 text-center font-semibold">
                    {quantity}
                  </span>
                  <button
                    onClick={() => setQuantity(quantity + 1)}
                    className="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-100"
                  >
                    <Plus className="w-4 h-4" />
                  </button>
                </div>
              </div>

              {/* Options */}
              {selectedItem.options && selectedItem.options.length > 0 && (
                <div className="space-y-2">
                  <Label>ตัวเลือก</Label>
                  <select
                    value={option}
                    onChange={(e) => setOption(e.target.value)}
                    className="w-full border border-gray-300 rounded-md p-2"
                  >
                    <option value="">ไม่ระบุ</option>
                    {selectedItem.options.map((opt) => (
                      <option key={opt} value={opt}>
                        {opt}
                      </option>
                    ))}
                  </select>
                </div>
              )}

              {/* Notes */}
              <div className="space-y-2">
                <Label>หมายเหตุ (ถ้ามี)</Label>
                <Textarea
                  value={notes}
                  onChange={(e) => setNotes(e.target.value)}
                  placeholder="เช่น ไม่เผ็ด, ไม่ใส่ผัก..."
                  rows={2}
                />
              </div>

              {/* Total & Actions */}
              <div className="border-t pt-4">
                <div className="flex justify-between items-center mb-4">
                  <span className="font-semibold">ราคารวม:</span>
                  <span className="text-xl font-bold text-blue-600">
                    ฿{(selectedItem.price * quantity).toLocaleString()}
                  </span>
                </div>
                <div className="flex gap-3">
                  <Button
                    variant="outline"
                    onClick={() => setSelectedItem(null)}
                    className="flex-1"
                  >
                    ยกเลิก
                  </Button>
                  <Button onClick={addToCart} className="flex-1">
                    เพิ่มลงตะกร้า
                  </Button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Shopping Cart */}
        {cart.length > 0 && (
          <div className="bg-white rounded-lg shadow-lg p-6 sticky bottom-6">
            <h2 className="text-lg font-semibold mb-4 flex items-center">
              <ShoppingCart className="w-5 h-5 mr-2" /> ตะกร้าของคุณ (
              {cart.length} รายการ)
            </h2>

            <div className="space-y-3 max-h-60 overflow-y-auto">
              {cart.map((item, index) => {
                const status = orderStatuses[item.menuItemId] || null;
                return (
                  <div
                    key={index}
                    className="flex justify-between items-center py-2 border-b"
                  >
                    <div className="flex-1">
                      <h4 className="font-medium">{item.menuItem.name}</h4>
                      {item.option && (
                        <p className="text-sm text-gray-500">
                          ตัวเลือก: {item.option}
                        </p>
                      )}
                      {item.notes && (
                        <p className="text-sm text-gray-500">
                          หมายเหตุ: {item.notes}
                        </p>
                      )}
                      {status && (
                        <Badge className="text-xs mt-1">
                          สถานะ:{" "}
                          {status === "new"
                            ? "กำลังเตรียม"
                            : status === "ready"
                            ? "พร้อมเสิร์ฟ"
                            : "เสิร์ฟแล้ว"}
                        </Badge>
                      )}
                    </div>
                    <div className="flex items-center gap-3">
                      <div className="flex items-center gap-2">
                        <button
                          onClick={() =>
                            updateCartItemQuantity(index, item.quantity - 1)
                          }
                          className="w-6 h-6 rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-100"
                        >
                          <Minus className="w-3 h-3" />
                        </button>
                        <span className="w-8 text-center text-sm">
                          {item.quantity}
                        </span>
                        <button
                          onClick={() =>
                            updateCartItemQuantity(index, item.quantity + 1)
                          }
                          className="w-6 h-6 rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-100"
                        >
                          <Plus className="w-3 h-3" />
                        </button>
                      </div>
                      <span className="font-medium min-w-[60px] text-right">
                        ฿{item.subtotal.toLocaleString()}
                      </span>
                      <button
                        onClick={() => removeFromCart(index)}
                        className="text-red-500 hover:text-red-700 ml-2"
                      >
                        <X className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                );
              })}
            </div>

            <div className="border-t pt-4 mt-4">
              <div className="flex justify-between items-center mb-4">
                <span className="text-lg font-semibold">รวมทั้งสิ้น:</span>
                <span className="text-2xl font-bold text-blue-600">
                  ฿{getTotalAmount().toLocaleString()}
                </span>
              </div>
              <div className="flex gap-3">
                <Button
                  variant="outline"
                  onClick={() => setCart([])}
                  className="flex-1"
                  disabled={loading}
                >
                  ล้างตะกร้า
                </Button>
                <Button
                  onClick={submitOrder}
                  disabled={loading}
                  className="flex-2"
                >
                  {loading ? "กำลังสั่ง..." : "ยืนยันสั่งอาหาร"}
                </Button>
              </div>
            </div>
          </div>
        )}

        {filteredMenuItems.length === 0 && (
          <div className="text-center py-12 bg-white rounded-lg shadow-sm">
            <p className="text-gray-500">ไม่พบเมนูในหมวดหมู่นี้</p>
          </div>
        )}
      </div>
    </div>
  );
}
